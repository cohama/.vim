snippet     plt
options     head
	from matplotlib import pyplot as plt
	plt.imshow((${0:TARGET}).astype(np.uint8)); plt.show()

snippet     pylint_disable
regexp     '#'
	pylint: disable=

snippet     bp
options     head
	breakpoint()

snippet     with_open
options     head
	with open(${1:#:file}, "${2:r}", ${3:encoding="utf-8"}) as ${4:f}:
		${0:pass}

snippet     super_init
options     head
	super().__init__(${1:#:**kwargs})${0}

snippet     typevar
options     head
	_T = TypeVar('_T')

snippet     self__
options     head
	self.__$1 = ${1:var}

snippet     imp_numpy
options     head
	import numpy as np

snippet     imp_pandas
options     head
	import pandas as pd

snippet     from_matplotlib
options     head
	from matplotlib import pyplot as plt

snippet     from_abc
options     head
	from abc import ABC, abstractmethod

snippet     from_dataclasses
options     head
	from dataclasses import dataclass


snippet     bench
options     head
	from benchmarker import Benchmarker


	with Benchmarker(1_000_000, width=20) as bench:
		s1, s2, s3, s4, s5 = "Haruhi", "Mikuru", "Yuki", "Itsuki", "Kyon"

		@bench(None)                ## empty loop
		def _(bm):
			for i in bm:
					pass

		@bench("join")
		def _(bm):
			for i in bm:
				sos = ''.join((s1, s2, s3, s4, s5))

		@bench("concat")
		def _(bm):
			for i in bm:
				sos = s1 + s2 + s3 + s4 + s5

		@bench("format")
		def _(bm):
			for i in bm:
				sos = f"{s1}{s2}{s3}{s4}{s5}"

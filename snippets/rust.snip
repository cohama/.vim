
snippet     impl
abbr        impl Struct
options     head
    impl ${1:#:struct_name} {
        ${0:TARGET}
    }

snippet     implg
abbr        impl <T> Struct <T>
options     head
    impl <${1:#:types}> ${2:#:struct_name}<$1> {
        ${0:TARGET}
    }

snippet     implt
abbr        impl Trait for Struct
options     head
    impl ${1:#:trait_name} for ${2:#:struct_name} {
        ${0:TARGET}
    }

snippet     impltg
abbr        impl <T> Trait<T> for Struct<T>
options     head
    impl <${1:#:types}> ${2:#:trait_name}<$1> for ${3:#:struct_name}<$1> {
        ${0:TARGET}
    }

snippet     derivedbg
abbr        #[derive(Debug)]
options     head
    #[derive(Debug)]


snippet     stru
abbr        struct Struct(..);
options     head
    struct ${1:#:struct_name}(${0:TARGET});

snippet     printd
abbr        println!("{:?}", x);
options     head
    println!("{:?}", ${0:TARGET});

snippet     print
abbr        println!("{}", x);
options     head
    println!("{}", ${0:TARGET});

snippet     vec
abbr        vec![];
options     word
  vec![${0:TARGET}];

snippet     assert
abbr        vec![];
options     head
  assert!(${0:TARGET});

snippet     asseq
abbr        vec![];
options     head
  assert_eq!(${1:TARGET}, ${2});

snippet     asseq2
abbr        vec![];
options     head
  assert_eq!{
      ${1:TARGET},
      ${2}
  };

snippet     modtest
abbr        mod tests {..}
options     head
    #[cfg(test)]
    mod tests {
        use super::*;

        ${0:TARGET}
    }

snippet     cl
abbr        |x|y
options     word
    |${1:arg}|${0:TARGET}

snippet     clm
abbr        |x| {...}
options     word
    |${1:arg}| {
        ${0:TARGET}
    }
